using System;
using System.Collections.Generic;
using System.Linq;
using LeMP;

namespace CodeFuzzer
{
    /// <summary>
    /// A token definition for multi-line comments.
    /// </summary>
    public class MultiLineCommentDef : ITokenDef
    {
        public this(
            set string Prefix, set string Suffix, set int MaxCommentLength)
        { }

        /// <summary>
        /// Gets the prefix that starts a multi-line comment.
        /// </summary>
        public string Prefix { get; private set; }

        /// <summary>
        /// Gets the suffix that ends a multi-line comment.
        /// </summary>
        public string Suffix { get; private set; }

        /// <summary>
        /// Gets the maximum length of a comment's contents.
        /// </summary>
        public int MaxCommentLength { get; private set; }

        /// <summary>
        /// Reads a token of this type from the given string slice. The length
        /// of the token is then returned. If the front of the slice does not
        /// define such a token, then zero is returned.
        /// </summary>
        public int Read(ForwardSlice Slice)
        {
            if (Slice.Pop(Prefix.Length) != Prefix)
                return 0;

            int i = Prefix.Length;
            while (Slice.Peek(Suffix.Length) != Suffix)
            {
                i++;
                char c;
                if (!Slice.TryPop(out c))
                    // We encountered the EOF before we encountered the suffix.
                    return 0;
            }

            // Pop the suffix.
            Slice.Pop(Suffix.Length);

            return i + Suffix.Length;
        }

        static this()
        {
            validChars = new char[0x7E - 0x20 + 4];
            validChars[0] = ' ';
            validChars[1] = '\n';
            validChars[2] = '\t';
            validChars[3] = '\r';
            for (int i = 4; i < validChars.Length; i++)
                validChars[i] = (char)(i + 0x20);
        }
        private static char[] validChars;

        /// <summary>
        /// Generates a new token value.
        /// </summary>
        public string Generate(Random Rand)
        {
            string contents = Helpers.GenerateRandomString(
                validChars, Rand.Next(0, MaxCommentLength), Rand);

            while (contents.IndexOf(Suffix) >= 0)
                contents = contents.Replace(Suffix, "");

            return Prefix + contents + Suffix;
        }
    }
}
