using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using LeMP;

namespace CodeFuzzer
{
    /// <summary>
    /// A data structure that describes a production rule.
    /// </summary>
    public sealed class ProductionRule : IEquatable<ProductionRule>
    {
        public this(set string Symbol, set IReadOnlyList<string> Body)
        { }

        /// <summary>
        /// Gets this production rule's nonterminal.
        /// </summary>
        public string Symbol { get; private set; }

        /// <summary>
        /// Gets the sequence of symbols, i.e., nonterminal and terminal names,
        /// that defines the production rule's body.
        /// </summary>
        public IReadOnlyList<string> Body { get; private set; }

        public bool Equals(ProductionRule Other)
        {
            return Symbol == Other.Symbol
                && Enumerable.SequenceEqual<string>(Body, Other.Body);
        }

        public override bool Equals(object Other)
        {
            return Other is ProductionRule && Equals((ProductionRule)Other);
        }

        public override int GetHashCode()
        {
            int result = Symbol.GetHashCode();
            foreach (var item in Body)
                result = (result << 2) ^ item.GetHashCode();

            return result;
        }

        public void AppendTo(StringBuilder Builder)
        {
            Builder.Append(Symbol);
            Builder.Append(" ->");
            foreach (var item in Body)
            {
                Builder.Append(" ");
                Builder.Append(item);
            }
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            AppendTo(sb);
            return sb.ToString();
        }
    }
}
